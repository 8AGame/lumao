// 初始化目录let config = require('../config/index')let _ = require('lodash')const fs = require('fs-extra')const path = require('path')const tool = require('../tool/index')const colors = require('colors')const output = new tool.ConsoleHelp()class Init{    constructor(templateName){        this.templateName = templateName        this.templateConfig = config.list[templateName]        this.templateUrl = path.join(__dirname, '../', 'template/' )        this.pluginUrl = path.join(process.cwd(), '/plugin/')        this.mycat = new tool.MyCat(process.cwd())    }    renderFile(){        if(!this.templateConfig){            console.log('未找到对应的模板')            return        }        try {            if(this.mycat.isExist()){                output.warnTitle()                output.warn('已经初始化的项目，无法再次初始化，重新初始化会覆盖当前的文件')                output.warn('如果需要，请手动删除 mycat.json 以重新初始化，请确认操作')                return            }            fs.copySync(path.join(this.templateUrl, 'public'), process.cwd()) // 首先克隆公用文件            fs.copySync(path.join(this.templateUrl, this.templateName), process.cwd()) //克隆私有文件            // 设置配置文件            this.mycat.setJson({                name: this.templateName,                need: this.templateConfig.need            })            // 最后下载插件            output.successTitle()            output.success('初始化项目成功')            output.success(('已经安装模板：'+this.templateName))            output.success(('已经安装插件：'+this.templateConfig.need.join(', ')))            output.success('你可以安装或者执行 live-server 进行开发')        } catch (err) {            console.error(err)        }    }}module.exports = function (args) {    // console.log(__dirname, process.cwd())    let doer = new Init(args[0])    doer.renderFile()}